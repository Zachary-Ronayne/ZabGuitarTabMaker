package appMain.gui.comp.editor;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import appMain.gui.util.Camera;
import appUtils.ZabAppSettings;
import appUtils.settings.ZabSettings;
import tab.InstrumentFactory;
import tab.Tab;
import tab.TabString;

/**
 * A class containing methods and variables to aid with setting up test cases for {@link TabPainter} and related tests. 
 * This class contains no tests on its own, it only initializes and provides variables for testing
 * @author zrona
 */
public abstract class AbstractTestTabPainter{

	protected TabPainter paint;
	protected SelectionList list;
	protected BufferedImage img;
	protected Graphics2D g;
	protected Tab tab;
	protected ArrayList<TabString> strs;
	protected TabString str0;
	protected TabString str1;
	protected TabString str2;
	protected TabString str3;
	protected TabString str4;
	protected TabString str5;
	protected Camera cam;
	
	/*
	 * High precision values in test cases were generated by printing out expected values from interacting with the GUI
	 */
	
	public static void init(){
		ZabAppSettings.init();
		
		ZabSettings s = ZabAppSettings.get();
		s.paint().getBaseX().set(200.0);
		s.paint().getBaseY().set(150.0);
		s.paint().getMeasureWidth().set(100.0);
		s.paint().getLineMeasures().set(4);
		s.text().getMeasuresPerLine().set(4);
		s.paint().getStringSpace().set(50.0);
		s.paint().getSelectionBuffer().set(10.0);
		s.paint().getAboveSpace().set(400.0);
		s.paint().getBelowSpace().set(600.0);
		s.tab().getQuantizeDivisor().set(4.0);
		s.control().getZoomFactor().set(2.0);
	}
	
	/**
	 * Helper method for initializing these and related test cases. 
	 * Places several predetermined notes into the given tab.
	 * @param tab The tab to place the notes, assumed to have exactly 6 TabStrings
	 */
	public static void initNotes(Tab tab){
		tab.placeQuantizedNote(0, 0, 3.5);
		tab.placeQuantizedNote(1, 0, 3.25);
		tab.placeQuantizedNote(2, 0, 3);
		tab.placeQuantizedNote(3, 0, 2);
		tab.placeQuantizedNote(4, 0, 1);
		tab.placeQuantizedNote(5, 0, 0);
		tab.placeQuantizedNote(5, 0, 1);
		tab.placeQuantizedNote(5, 0, 2);
		tab.placeQuantizedNote(5, 0, 3);
	}
	
	/**
	 * Helper method for initializing these and related test cases. 
	 * Places several other predetermined notes into the given tab in a new line.
	 * @param tab The tab to place the notes, assumed to have exactly 6 TabStrings
	 */
	public static void initAditionalNotes(Tab tab){
		tab.placeQuantizedNote(0, 0, 7.5);
		tab.placeQuantizedNote(1, 0, 7.25);
		tab.placeQuantizedNote(2, 0, 7);
		tab.placeQuantizedNote(3, 0, 6);
		tab.placeQuantizedNote(4, 0, 5);
		tab.placeQuantizedNote(5, 0, 4);
		tab.placeQuantizedNote(5, 0, 5);
		tab.placeQuantizedNote(5, 0, 6);
		tab.placeQuantizedNote(5, 0, 7);
	}
	
	/**
	 * Helper method for initializing these and related test cases, 
	 * places the given camera in a particular position 
	 * @param tab The camera to modify
	 */
	public static void initCam(Camera cam){
		cam.setX(100.1);
		cam.setY(400.21);
		cam.setXZoomFactor(1.2);
		cam.setYZoomFactor(1.2);
	}
	
	/**
	 * Helper method for initializing these and related test cases
	 * places the given camera in a particular position zoomed out so that multiple lines can be seen
	 * @param tab The camera to modify
	 */
	public static void initZoomedOutCam(Camera cam){
		cam.setX(-100.0);
		cam.setY(400.21);
		cam.setXZoomFactor(-1);
		cam.setYZoomFactor(-1);
	}
	
	/**
	 * Utility method for setting up this tester so that the painter can have painted a frame before or not
	 * @param willPaint true to initially paint the painter to the buffered image, false otherwise
	 */
	public void setup(boolean willPaint){
		paint = new TabPainter(400, 340, InstrumentFactory.guitarStandard());
		tab = InstrumentFactory.guitarStandard();
		paint.setTab(tab);
		list = paint.getSelected();
		initNotes(tab);
		strs = tab.getStrings();
		str0 = strs.get(0);
		str1 = strs.get(1);
		str2 = strs.get(2);
		str3 = strs.get(3);
		str4 = strs.get(4);
		str5 = strs.get(5);
		img = new BufferedImage(100, 100, BufferedImage.TYPE_4BYTE_ABGR);
		g = (Graphics2D)img.getGraphics();
		cam = paint.getCamera();
		initCam(cam);
		if(willPaint) paint.paint(g);
	}
	
}
